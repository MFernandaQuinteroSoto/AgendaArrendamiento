@page "/Cancelar"

@inject IlistaServicio ListaServicio
@inject NavigationManager NavigationManager
@inject IgrabarClienteServicio grabarClienteServicio

<div class="text-center">
    <h5>Los campos señalados con asterico <font color="red">(*)</font> son obligatorios</h5>
</div>

<div class="card">
    <div class="card-body">
        <div class="container">
            <fieldset class="border p-2">
                <legend class="float-none w-auto p-2">
                    <font color="#dc8f35" ; size="2">
                        <b>Consulta o Cancelacion de Citas</b>
                    </font>
                </legend>

                <div class="row">
                    <div class="col-md-6">

                        <div class="col-md-12 mb-3">
                            <FieldLabel><font color="red">(*)</font>Numero de Documento</FieldLabel>
                            <RadzenTextBox @bind-Value="@Models_Clientes_Turno.STRCEDULA" Style="width: 100%" Placeholder="Digite numero de identificacion" MaxLength="30" class="form-control" type="number" required />
                        </div>

                        <div class="col-md-12 mb-3">
                            <FieldLabel><font color="red">(*)</font>Correo Electronico</FieldLabel>
                            <RadzenTextBox @bind-Value="@Models_Clientes_Turno.STREMAIL" type="email" Placeholder="Digite Correo Electronico" MaxLength="200" class="form-control" required />
                        </div>


                    </div>

                    <div class="col-md-6 mb-3 ">

                        <style>
                            .table-wrapper {
                                max-height: 265px;
                                overflow: auto;
                                display: inline-block;
                            }
                        </style>

                        <table class="table table-wrapper">
                            <thead>
                                <tr>
                                    <th><font size="1">HORAS</font></th>
                                    <th align="center"><font size="1">SEDE</font></th>
                                    <th><font size="1">ASESOR</font></th>
                                    <th align="center"><font size="1">FECHA CITA</font></th>
                                    <th align="center"><font size="1">CANCELAR</font></th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (ModelsCancelacionesX != null && ModelsCancelacionesX.Count > 0)
                                {
                                    @foreach (var datos in ModelsCancelacionesX)
                                    {
                                        <tr>
                                            <td><font size="1">@datos.STRHORARIO</font></td>
                                            <td><font size="1">@datos.STRSEDE</font></td>
                                            <td><font size="1">@datos.STRASESOR</font></td>
                                            <td><font size="1">@datos.STRFECHARESERVA</font></td>
                                            <td><font size="1"><RadzenButton Click="@(args => ValidarEliminar(datos.STRCODIGORESERVA))" data-toggle="tooltip" title="Esta opcion te permite Cancelar una Cita" class="btn btn-primary btn-sm" Style="background:orange" Text="Cancelar" ButtonStyle="ButtonStyle.Primary" /></font></td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>

                    </div>

                </div>

                <div class="row justify-content-center">
                    <div class="col-md-5 mb-3">
                        <RadzenButton Click="@(args => Consultar())" data-toggle="tooltip" title="Esta opcion te permite consultar las reservas activas!" class="btn btn-primary" Style="background:orange" Text="Consultar" ButtonStyle="ButtonStyle.Primary" />
                        <RadzenButton Click="@(args => Cerrar())" data-toggle="tooltip" title="Esta opcion te permite retornar al menu principal!" class="btn btn-primary" Style="background:orange" Text="Retornar" ButtonStyle="ButtonStyle.Secondary" />
                    </div>
                </div>

            </fieldset>
        </div>
    </div>
</div>


<Modal @ref="modalconfirmacion">
    <ModalContent Size="ModalSize.Large" Centered="true" Scrollable="true">
        <ModalHeader>
            <ModalTitle>
                Consulta reserva cita de atencion PQRS emvarias.
            </ModalTitle>
        </ModalHeader>
        <ModalBody>
            <br />
            <p>
                Señor Usuario:
                <br /><br />
                Usted no tiene Reservas a la fecha, si tiene alguna duda lo inivitamos a ponerse en contacto <br />
                con nuestra linea de atencion al cliente (+604) 444 56 36.
            </p>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@CerrarModal">Cerrar</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalconfirmacioneliminar">
    <ModalContent Size="ModalSize.Large" Centered="true" Scrollable="true">
        <ModalHeader>
            <ModalTitle>
                Sistema de cita de atencion PQRS emvarias.
            </ModalTitle>
        </ModalHeader>
        <ModalBody>
            <br />
            <p>
                Señor Usuario:
                <br /><br />
                Esta usted seguro de Cancelar la cita?.
            </p>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@Eliminar">Aceptar Cancelacion</Button>
            <Button Color="Color.Secondary" Clicked="@CerrarModal">Cerrar</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalcirculo">
    <ModalContent Size="ModalSize.Small" Centered="true">
        <button class="btn btn-primary text-nowrap" type="button">
            <span class="spinner-border spinner-border-sm mr-2"></span>
            Enviando datos...
        </button>
    </ModalContent>
</Modal>

@code {

    private Modal? modalcirculo = null!;

    string varSTRCODIGORESERVA = string.Empty;

    private Modal? modalconfirmacion = null!;

    private Modal? modalconfirmacioneliminar = null!;

    private Models_Clientes_Turnos? Models_Clientes_Turno;

    List<ModelsCancelaciones>? ModelsCancelacionesX;


    public async Task Eliminar()
    {
        modalcirculo.Show();

        await grabarClienteServicio.DeleteReserva(new Models_Parametros() { strcodigoasesor = varSTRCODIGORESERVA, stremail = Models_Clientes_Turno.STREMAIL });
        
        modalcirculo.Hide();
        
        await Consultar();
        modalconfirmacioneliminar.Hide();
    }

    public async Task ValidarEliminar(string STRCODIGORESERVA)
    {
        varSTRCODIGORESERVA = STRCODIGORESERVA;

        modalconfirmacioneliminar.Show();
    }

    public async Task Consultar()
    {     
        var yearsystem = DateTime.Today.Year;
        var monthsystem = DateTime.Today.Month;
        var daysystem = DateTime.Today.Day;

        var fechasistema = yearsystem + "/" + monthsystem.ToString().PadLeft(2, '0') + "/" + daysystem.ToString().PadLeft(2, '0');

        //var hora = DateTime.Now.ToString("h:mm:ss tt");

        ModelsCancelacionesX = (await ListaServicio.GetAllConsultaHorariosReservados(new Models_Parametros() { strcodigoasesor = Models_Clientes_Turno.STRCEDULA, strfechareserva = fechasistema, stremail = Models_Clientes_Turno.STREMAIL })).ToList();

        if (ModelsCancelacionesX == null || ModelsCancelacionesX.Count <= 0)
        {
            modalconfirmacion.Show();
        }

    }

    private void Cerrar()
    {
        NavigationManager.NavigateTo("/");
    }

    private void CerrarModal()
    {
        modalconfirmacion.Hide();
        modalconfirmacioneliminar.Hide();
    }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();

            Models_Clientes_Turno = new Models_Clientes_Turnos();
        }
        catch (Exception ex)
        {

            throw;
        }
    }
}
